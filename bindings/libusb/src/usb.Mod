MODULE usb [ INTERFACE "C"; LINK LIB "usb" END ];

IMPORT SYSTEM;
CONST
  USB_CLASS_PER_INTERFACE* = 0;
  USB_CLASS_AUDIO* = 1;
  USB_CLASS_COMM* = 2;
  USB_CLASS_HID* = 3;
  USB_CLASS_PRINTER* = 7;
  USB_CLASS_PTP* = 6;
  USB_CLASS_MASS_STORAGE* = 8;
  USB_CLASS_HUB* = 9;
  USB_CLASS_DATA* = 10;
  USB_CLASS_VENDOR_SPEC* = 0FFH;
  USB_DT_DEVICE* = 001H;
  USB_DT_CONFIG* = 002H;
  USB_DT_STRING* = 003H;
  USB_DT_INTERFACE* = 004H;
  USB_DT_ENDPOINT* = 005H;
  USB_DT_HID* = 021H;
  USB_DT_REPORT* = 022H;
  USB_DT_PHYSICAL* = 023H;
  USB_DT_HUB* = 029H;
  USB_DT_DEVICE_SIZE* = 18;
  USB_DT_CONFIG_SIZE* = 9;
  USB_DT_INTERFACE_SIZE* = 9;
  USB_DT_ENDPOINT_SIZE* = 7;
  USB_DT_ENDPOINT_AUDIO_SIZE* = 9;
  USB_DT_HUB_NONVAR_SIZE* = 7;
  USB_MAXENDPOINTS* = 32;
  USB_ENDPOINT_ADDRESS_MASK* = 00FH;
  USB_ENDPOINT_DIR_MASK* = 080H;
  USB_ENDPOINT_TYPE_MASK* = 003H;
  USB_ENDPOINT_TYPE_CONTROL* = 0;
  USB_ENDPOINT_TYPE_ISOCHRONOUS* = 1;
  USB_ENDPOINT_TYPE_BULK* = 2;
  USB_ENDPOINT_TYPE_INTERRUPT* = 3;
  USB_MAXINTERFACES* = 32;
  USB_MAXALTSETTING* = 128;
  USB_MAXCONFIG* = 8;
  USB_REQ_GET_STATUS* = 0;
  USB_REQ_CLEAR_FEATURE* = 001H;
  USB_REQ_SET_FEATURE* = 003H;
  USB_REQ_SET_ADDRESS* = 005H;
  USB_REQ_GET_DESCRIPTOR* = 006H;
  USB_REQ_SET_DESCRIPTOR* = 007H;
  USB_REQ_GET_CONFIGURATION* = 008H;
  USB_REQ_SET_CONFIGURATION* = 009H;
  USB_REQ_GET_INTERFACE* = 00AH;
  USB_REQ_SET_INTERFACE* = 00BH;
  USB_REQ_SYNCH_FRAME* = 00CH;
  USB_TYPE_STANDARD* = 0;
  USB_TYPE_CLASS* = 020H;
  USB_TYPE_VENDOR* = 040H;
  USB_TYPE_RESERVED* = 060H;
  USB_RECIP_DEVICE* = 0;
  USB_RECIP_INTERFACE* = 001H;
  USB_RECIP_ENDPOINT* = 002H;
  USB_RECIP_OTHER* = 003H;
  USB_ENDPOINT_IN* = 080H;
  USB_ENDPOINT_OUT* = 0;
  USB_ERROR_BEGIN* = 500000;
  LIBUSB_HAS_GET_DRIVER_NP* = 1;
  LIBUSB_HAS_DETACH_KERNEL_DRIVER_NP* = 1;
TYPE
  uint8_t* = CHAR;
  usb_descriptor_header_tag* = RECORD 
    bLength* : uint8_t;
    bDescriptorType* : uint8_t;
  END;
  uint16_t* = INTEGER;
  usb_string_descriptor_tag* = RECORD 
    bLength* : uint8_t;
    bDescriptorType* : uint8_t;
    wData* : ARRAY 1 OF uint16_t;
  END;
  usb_endpoint_descriptor_tag* = RECORD 
    bLength* : uint8_t;
    bDescriptorType* : uint8_t;
    bEndpointAddress* : uint8_t;
    bmAttributes* : uint8_t;
    wMaxPacketSize* : uint16_t;
    bInterval* : uint8_t;
    bRefresh* : uint8_t;
    bSynchAddress* : uint8_t;
    extra* : POINTER TO ARRAY OF CHAR;
    extralen* : LONGINT;
  END;
  usb_interface_descriptor_tag* = RECORD 
    bLength* : uint8_t;
    bDescriptorType* : uint8_t;
    bInterfaceNumber* : uint8_t;
    bAlternateSetting* : uint8_t;
    bNumEndpoints* : uint8_t;
    bInterfaceClass* : uint8_t;
    bInterfaceSubClass* : uint8_t;
    bInterfaceProtocol* : uint8_t;
    iInterface* : uint8_t;
    endpoint* : POINTER TO usb_endpoint_descriptor_tag;
    extra* : POINTER TO ARRAY OF CHAR;
    extralen* : LONGINT;
  END;
  usb_interface_tag* = RECORD 
    altsetting* : POINTER TO usb_interface_descriptor_tag;
    num_altsetting* : LONGINT;
  END;
  usb_config_descriptor_tag* = RECORD 
    bLength* : uint8_t;
    bDescriptorType* : uint8_t;
    wTotalLength* : uint16_t;
    bNumInterfaces* : uint8_t;
    bConfigurationValue* : uint8_t;
    iConfiguration* : uint8_t;
    bmAttributes* : uint8_t;
    MaxPower* : uint8_t;
    interface* : POINTER TO usb_interface_tag;
    extra* : POINTER TO ARRAY OF CHAR;
    extralen* : LONGINT;
  END;
  usb_device_descriptor_tag* = RECORD 
    bLength* : uint8_t;
    bDescriptorType* : uint8_t;
    bcdUSB* : uint16_t;
    bDeviceClass* : uint8_t;
    bDeviceSubClass* : uint8_t;
    bDeviceProtocol* : uint8_t;
    bMaxPacketSize0* : uint8_t;
    idVendor* : uint16_t;
    idProduct* : uint16_t;
    bcdDevice* : uint16_t;
    iManufacturer* : uint8_t;
    iProduct* : uint8_t;
    iSerialNumber* : uint8_t;
    bNumConfigurations* : uint8_t;
  END;
  usb_ctrl_setup_tag* = RECORD 
    bRequestType* : uint8_t;
    bRequest* : uint8_t;
    wValue* : uint16_t;
    wIndex* : uint16_t;
    wLength* : uint16_t;
  END;
  usb_device_tag* = RECORD 
    next* : POINTER TO usb_device_tag;
    prev* : POINTER TO usb_device_tag;
    filename* : ARRAY 128 OF CHAR;
    bus* : POINTER TO usb_bus_tag;
    descriptor* : usb_device_descriptor_tag;
    config* : POINTER TO usb_config_descriptor_tag;
    dev* : SYSTEM.PTR;
    devnum* : uint8_t;
    num_children* : CHAR;
    children* : POINTER TO ARRAY OF POINTER TO usb_device_tag;
  END;
  uint32_t* = LONGINT;
  usb_bus_tag* = RECORD 
    next* : POINTER TO usb_bus_tag;
    prev* : POINTER TO usb_bus_tag;
    dirname* : ARRAY 128 OF CHAR;
    devices* : POINTER TO usb_device_tag;
    location* : uint32_t;
    root_dev* : POINTER TO usb_device_tag;
  END;
  usb_dev_handle_tag* = RECORD  END;
  AutoPtrusb_bus_tag* = POINTER TO usb_bus_tag;
  AutoPtr0* = POINTER TO ARRAY OF CHAR;
  AutoPtrusb_device_tag* = POINTER TO usb_device_tag;
  AutoPtrusb_dev_handle* = POINTER TO usb_dev_handle;
  int8_t* = CHAR;
  int16_t* = INTEGER;
  int32_t* = LONGINT;
  int64_t* = HUGEINT;
  uint64_t* = HUGEINT;
  size_t* = uint32_t;
  FILE* = SYSTEM.PTR;
  usb_dev_handle* = usb_dev_handle_tag;
VAR
  usb_busses* : POINTER TO usb_bus_tag;
  PROCEDURE usb_open* (dev : AutoPtrusb_device_tag) : AutoPtrusb_dev_handle;
  PROCEDURE usb_close* (dev : AutoPtrusb_dev_handle) : LONGINT;
  PROCEDURE usb_get_string* (dev : AutoPtrusb_dev_handle; index : LONGINT; langid : LONGINT; buf : AutoPtr0; buflen : size_t) : LONGINT;
  PROCEDURE usb_get_string_simple* (dev : AutoPtrusb_dev_handle; index : LONGINT; buf : AutoPtr0; buflen : size_t) : LONGINT;
  PROCEDURE usb_get_descriptor_by_endpoint* (udev : AutoPtrusb_dev_handle; ep : LONGINT; type : CHAR; index : CHAR; buf : FILE; size : LONGINT) : LONGINT;
  PROCEDURE usb_get_descriptor* (udev : AutoPtrusb_dev_handle; type : CHAR; index : CHAR; buf : FILE; size : LONGINT) : LONGINT;
  PROCEDURE usb_bulk_write* (dev : AutoPtrusb_dev_handle; ep : LONGINT; bytes : AutoPtr0; size : LONGINT; timeout : LONGINT) : LONGINT;
  PROCEDURE usb_bulk_read* (dev : AutoPtrusb_dev_handle; ep : LONGINT; bytes : AutoPtr0; size : LONGINT; timeout : LONGINT) : LONGINT;
  PROCEDURE usb_interrupt_write* (dev : AutoPtrusb_dev_handle; ep : LONGINT; bytes : AutoPtr0; size : LONGINT; timeout : LONGINT) : LONGINT;
  PROCEDURE usb_interrupt_read* (dev : AutoPtrusb_dev_handle; ep : LONGINT; bytes : AutoPtr0; size : LONGINT; timeout : LONGINT) : LONGINT;
  PROCEDURE usb_control_msg* (dev : AutoPtrusb_dev_handle; requesttype : LONGINT; request : LONGINT; value : LONGINT; index : LONGINT; bytes : AutoPtr0; size : LONGINT; timeout : LONGINT) : LONGINT;
  PROCEDURE usb_set_configuration* (dev : AutoPtrusb_dev_handle; configuration : LONGINT) : LONGINT;
  PROCEDURE usb_claim_interface* (dev : AutoPtrusb_dev_handle; interface : LONGINT) : LONGINT;
  PROCEDURE usb_release_interface* (dev : AutoPtrusb_dev_handle; interface : LONGINT) : LONGINT;
  PROCEDURE usb_set_altinterface* (dev : AutoPtrusb_dev_handle; alternate : LONGINT) : LONGINT;
  PROCEDURE usb_resetep* (dev : AutoPtrusb_dev_handle; ep : LONGINT) : LONGINT;
  PROCEDURE usb_clear_halt* (dev : AutoPtrusb_dev_handle; ep : LONGINT) : LONGINT;
  PROCEDURE usb_reset* (dev : AutoPtrusb_dev_handle) : LONGINT;
  PROCEDURE usb_get_driver_np* (dev : AutoPtrusb_dev_handle; interface : LONGINT; name : AutoPtr0; namelen : LONGINT) : LONGINT;
  PROCEDURE usb_detach_kernel_driver_np* (dev : AutoPtrusb_dev_handle; interface : LONGINT) : LONGINT;
  PROCEDURE usb_strerror* () : AutoPtr0;
  PROCEDURE usb_init* ();
  PROCEDURE usb_set_debug* (level : LONGINT);
  PROCEDURE usb_find_busses* () : LONGINT;
  PROCEDURE usb_find_devices* () : LONGINT;
  PROCEDURE usb_device* (dev : AutoPtrusb_dev_handle) : AutoPtrusb_device_tag;
  PROCEDURE usb_get_busses* () : AutoPtrusb_bus_tag;
END usb.
